name: Database Script Update

on:
  # Runs every Wednesday at 6 AM for August-February
  schedule:
    - cron: '0 6 * 8-2 3'  # 
  workflow_dispatch:

jobs:
  update-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
        cache: 'pip'  # Cache pip dependencies if you have requirements.txt
    
    - name: Install Python dependencies
      run: |
        if [ -f requirements.txt ]; then
          echo "Installing dependencies from requirements.txt"
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, skipping dependency installation"
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Generate unique branch name
      id: branch
      run: |
        BRANCH_NAME="db-update-$(date +%Y%m%d-%H%M%S)"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "Generated branch name: $BRANCH_NAME"
    
    - name: Create and checkout temp branch
      id: create_branch
      run: |
        echo "Creating temp branch: ${{ steps.branch.outputs.branch_name }}"
        git checkout -b ${{ steps.branch.outputs.branch_name }}
        git push -u origin ${{ steps.branch.outputs.branch_name }}
        echo "Temporary DB update branch created and pushed successfully"
    
    - name: Execute database script
      id: db_script
      run: |
        echo "Executing database update script..."
        python db/setup_db.py
        echo "Database script executed successfully"
    
    - name: Check for file changes
      id: check_changes
      run: |
        if git diff --quiet && git diff --cached --quiet; then
          echo "No changes detected after running database script"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected after running database script"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          git status
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "Committing changes..."
        git add .
        git commit -m "Database update - $(date '+%Y-%m-%d %H:%M:%S')"
        git push origin ${{ steps.branch.outputs.branch_name }}
        echo "Changes committed and pushed successfully"
    
    - name: Create Pull Request
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.branch.outputs.branch_name }}
        base: main
        title: "Database Update - $(date '+%Y-%m-%d')"
        body: |
          ## Database Update
          
          This PR contains automated database updates generated on $(date '+%Y-%m-%d at %H:%M:%S UTC').
          
          ### Changes
          - Database script executed successfully
          - DB updated as per script execution
          
          ### Generated by
          GitHub Actions workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        draft: false
    
    - name: Skip PR creation - no changes
      if: steps.check_changes.outputs.has_changes == 'false'
      run: |
        echo "No changes were made by the database script, skipping PR creation"
    
    # Error handling and cleanup
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "Workflow failed, starting cleanup..."
        
        # Get current branch
        CURRENT_BRANCH=$(git branch --show-current)
        echo "Current branch: $CURRENT_BRANCH"
        
        # Switch back to main if we're not already there
        if [ "$CURRENT_BRANCH" != "main" ]; then
          echo "Switching back to main branch..."
          git checkout main || echo "Warning: Could not switch to main branch"
        fi
        
        # Delete the temp branch if it exists
        if [ -n "${{ steps.branch.outputs.branch_name }}" ]; then
          echo "Attempting to delete temp branch: ${{ steps.branch.outputs.branch_name }}"
          
          # Delete local branch
          git branch -D ${{ steps.branch.outputs.branch_name }} 2>/dev/null || echo "Local branch not found or already deleted"
          
          # Delete remote branch
          git push origin --delete ${{ steps.branch.outputs.branch_name }} 2>/dev/null || echo "Remote branch not found or already deleted"
        fi
        
        echo "Cleanup completed"
    
    - name: Provide failure context
      if: failure()
      run: |
        echo "=== WORKFLOW FAILURE SUMMARY ==="
        echo "Failed step: Check the logs above for the specific step that failed"
        echo "Branch name: ${{ steps.branch.outputs.branch_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo ""
        echo "Common troubleshooting steps:"
        echo "1. Check if the database script path is correct"
        echo "2. Verify Python dependencies are properly installed"
        echo "3. Ensure the script has proper error handling"
        echo "4. Check if required environment variables or secrets are set"
        echo ""
        echo "Full logs available at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # Exit with failure
        exit 1